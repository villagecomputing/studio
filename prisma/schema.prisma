generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Dataset {
  uuid                     String                     @id
  name                     String
  created_at               DateTime                   @default(now())
  deleted_at               DateTime?
  updated_at               DateTime                   @updatedAt
  Dataset_User_Permissions Dataset_User_Permissions[]
  Dataset_column           Dataset_column[]
  Experiment               Experiment[]
}

model Dataset_column {
  id                Int                 @id @default(autoincrement())
  dataset_uuid      String
  name              String
  field             String
  index             Int
  type              String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?
  Dataset           Dataset             @relation(fields: [dataset_uuid], references: [uuid], onDelete: Cascade)
  Experiment_column Experiment_column[]
}

model Experiment_column {
  id                     Int             @id @default(autoincrement())
  experiment_uuid        String
  name                   String
  field                  String
  type                   String
  ground_truth_column_id Int?
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
  deleted_at             DateTime?
  Dataset_column         Dataset_column? @relation(fields: [ground_truth_column_id], references: [id])
  Experiment             Experiment      @relation(fields: [experiment_uuid], references: [uuid], onDelete: Cascade)
}

model Experiment_group {
  id         Int          @id @default(autoincrement())
  created_at DateTime     @default(now())
  Experiment Experiment[]
}

model Experiment {
  uuid                        String                        @id
  name                        String
  description                 String?
  dataset_uuid                String
  group_id                    Int
  pipeline_metadata           String
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime                      @updatedAt
  deleted_at                  DateTime?
  total_latency               Float                         @default(0)
  latency_p50                 Float                         @default(0)
  latency_p90                 Float                         @default(0)
  total_cost                  Float                         @default(0)
  total_accuracy              Float                         @default(0)
  total_rows                  Float                         @default(0)
  Experiment_group            Experiment_group              @relation(fields: [group_id], references: [id], onDelete: Cascade)
  Dataset                     Dataset                       @relation(fields: [dataset_uuid], references: [uuid], onDelete: Cascade)
  Experiment_User_Permissions Experiment_User_Permissions[]
  Experiment_column           Experiment_column[]
}

model Logs {
  uuid                 String                 @id
  name                 String
  description          String?
  pipeline_metadata    String
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  deleted_at           DateTime?
  total_latency        Float                  @default(0)
  latency_p50          Float                  @default(0)
  latency_p90          Float                  @default(0)
  total_cost           Float                  @default(0)
  total_accuracy       Float                  @default(0)
  total_rows           Float                  @default(0)
  Log_User_Permissions Log_User_Permissions[]
  Logs_column          Logs_column[]
}

model Logs_column {
  id         Int       @id @default(autoincrement())
  logs_uuid  String
  name       String
  field      String
  type       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  Logs       Logs      @relation(fields: [logs_uuid], references: [uuid], onDelete: Cascade)
}

model API_key {
  uuid       String    @id
  user_id    String
  key        String
  created_at DateTime  @default(now())
  updated_at DateTime
  deleted_at DateTime?
  User       User      @relation(fields: [user_id], references: [uuid], onDelete: Cascade)
}

model Dataset_User_Permissions {
  uuid       String    @id
  user_id    String
  dataset_id String
  permission String
  created_at DateTime  @default(now())
  updated_at DateTime
  deleted_at DateTime?
  Dataset    Dataset   @relation(fields: [dataset_id], references: [uuid], onDelete: Cascade)
  User       User      @relation(fields: [user_id], references: [uuid], onDelete: Cascade)
}

model Experiment_User_Permissions {
  uuid          String     @id
  user_id       String
  experiment_id String
  permission    String
  created_at    DateTime   @default(now())
  updated_at    DateTime
  deleted_at    DateTime?
  Experiment    Experiment @relation(fields: [experiment_id], references: [uuid], onDelete: Cascade)
  User          User       @relation(fields: [user_id], references: [uuid], onDelete: Cascade)
}

model Log_User_Permissions {
  uuid       String    @id
  user_id    String
  log_id     String
  permission String
  created_at DateTime  @default(now())
  updated_at DateTime
  deleted_at DateTime?
  Logs       Logs      @relation(fields: [log_id], references: [uuid], onDelete: Cascade)
  User       User      @relation(fields: [user_id], references: [uuid], onDelete: Cascade)
}

model User {
  uuid                        String                        @id
  external_id                 String
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime
  deleted_at                  String?
  API_key                     API_key[]
  Dataset_User_Permissions    Dataset_User_Permissions[]
  Experiment_User_Permissions Experiment_User_Permissions[]
  Log_User_Permissions        Log_User_Permissions[]
}
